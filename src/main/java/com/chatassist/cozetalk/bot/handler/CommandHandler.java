package com.chatassist.cozetalk.bot.handler;

import com.chatassist.cozetalk.domain.User;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;

import com.chatassist.cozetalk.bot.keyboard.InlineKeyboardFactory;
import com.chatassist.cozetalk.bot.keyboard.ReplyKeyboardFactory;
import com.chatassist.cozetalk.domain.Subscription;
import com.chatassist.cozetalk.service.PaymentService;
import com.chatassist.cozetalk.service.SubscriptionService;
import com.chatassist.cozetalk.service.UserService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Optional;

@Component
@RequiredArgsConstructor
@Slf4j
public class CommandHandler {

    private final TelegramLongPollingBot bot;
    private final UserService userService;
    private final SubscriptionService subscriptionService;
    private final PaymentService paymentService;
    private final InlineKeyboardFactory inlineKeyboardFactory;
    private final ReplyKeyboardFactory replyKeyboardFactory;

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

    public void handleCommand(Message message) {
        String command = message.getText();
        Long chatId = message.getChatId();

        switch (command.split(" ")[0]) {
            case "/start":
                handleStartCommand(chatId);
                break;
            case "/help":
                handleHelpCommand(chatId);
                break;
            case "/tariff":
                handleTariffCommand(chatId);
                break;
            case "/profile":
                handleProfileCommand(chatId, message.getFrom().getId());
                break;
            default:
                handleUnknownCommand(chatId);
                break;
        }
    }

    private void handleStartCommand(Long chatId) {
        String welcomeText = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CozeTalk! üëã\n\n"
                + "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ–π—Ä–æ–º–æ–¥–µ–ª—å Coze API.\n\n"
                + "üîπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å.\n"
                + "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tariff –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.\n"
                + "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.\n"
                + "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.";

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(welcomeText);
        message.setReplyMarkup(replyKeyboardFactory.createMainMenuKeyboard());

        try {
            bot.execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }

    private void handleHelpCommand(Long chatId) {
        String helpText = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                + "üîπ /start - –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
                + "üîπ /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                + "üîπ /tariff - –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω\n"
                + "üîπ /profile - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n\n"
                + "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–º–æ–¥–µ–ª–∏ Coze API.";

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(helpText);

        try {
            bot.execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é: {}", e.getMessage(), e);
        }
    }

    private void handleTariffCommand(Long chatId) {
        String tariffText = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:\n\n"
                + "üîπ *–†–æ–º–∞–Ω—Ç–∏–∫* - 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å - 990 ‚ÇΩ/–º–µ—Å—è—Ü\n"
                + "üîπ *–ê–ª—å—Ñ–∞—á* - 150 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å - 1990 ‚ÇΩ/–º–µ—Å—è—Ü\n"
                + "üîπ *–õ–æ–≤–µ–ª–∞—Å* - –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - 4990 ‚ÇΩ/–º–µ—Å—è—Ü\n\n"
                + "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µ:";

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(tariffText);
        message.setParseMode("Markdown");
        message.setReplyMarkup(inlineKeyboardFactory.createTariffKeyboard());

        try {
            bot.execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏: {}", e.getMessage(), e);
        }
    }

    private void handleProfileCommand(Long chatId, Long telegramId) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–µ
        User user = userService.findByTelegramId(telegramId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        Optional<Subscription> subscriptionOpt = subscriptionService.findByUser(user);

        StringBuilder profileText = new StringBuilder();
        profileText.append("*–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n");
        profileText.append("üîπ ID: ").append(user.getTelegramId()).append("\n");
        profileText.append("üîπ –ò–º—è: ").append(user.getFirstName()).append("\n");

        if (subscriptionOpt.isPresent()) {
            Subscription subscription = subscriptionOpt.get();

            profileText.append("\n*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ*\n\n");
            profileText.append("üîπ –¢–∞—Ä–∏—Ñ: *").append(subscription.getTariffPlan()).append("*\n");
            profileText.append("üîπ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: ").append(subscription.getDailyLimit()).append(" –∑–∞–ø—Ä–æ—Å–æ–≤\n");
            profileText.append("üîπ –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: ")
                    .append(subscriptionService.getRemainingRequests(telegramId)).append(" –∑–∞–ø—Ä–æ—Å–æ–≤\n");
            profileText.append("üîπ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ")
                    .append(subscription.getEndDate().format(DATE_FORMATTER)).append("\n");

            LocalDateTime now = LocalDateTime.now();
            if (subscription.getEndDate().isBefore(now)) {
                profileText.append("\n‚ö†Ô∏è *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!* –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ —Å –ø–æ–º–æ—â—å—é /tariff\n");
            }
        } else {
            profileText.append("\n‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏*\n");
            profileText.append("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é /tariff\n");
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(profileText.toString());
        message.setParseMode("Markdown");

        try {
            bot.execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ: {}", e.getMessage(), e);
        }
    }

    private void handleUnknownCommand(Long chatId) {
        String text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        try {
            bot.execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ: {}", e.getMessage(), e);
        }
    }
}